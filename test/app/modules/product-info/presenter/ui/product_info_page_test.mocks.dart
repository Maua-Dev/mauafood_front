// Mocks generated by Mockito 5.4.2 from annotations
// in mauafood_front/test/app/modules/product-info/presenter/ui/product_info_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter/material.dart' as _i10;
import 'package:mauafood_front/app/modules/product-info/presenter/controllers/product_info_controller.dart'
    as _i6;
import 'package:mauafood_front/app/modules/user/presenter/controllers/cart/cart_controller.dart'
    as _i8;
import 'package:mauafood_front/app/modules/user/presenter/controllers/cart/states/cart_states.dart'
    as _i5;
import 'package:mauafood_front/app/shared/domain/entities/product.dart' as _i3;
import 'package:mauafood_front/app/shared/domain/enums/restaurant_enum.dart'
    as _i7;
import 'package:mauafood_front/app/shared/infra/models/cart_product_model.dart'
    as _i2;
import 'package:mobx/mobx.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartProductModel_0 extends _i1.SmartFake
    implements _i2.CartProductModel {
  _FakeCartProductModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProduct_1 extends _i1.SmartFake implements _i3.Product {
  _FakeProduct_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_2 extends _i1.SmartFake
    implements _i4.ReactiveContext {
  _FakeReactiveContext_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCartState_3 extends _i1.SmartFake implements _i5.CartState {
  _FakeCartState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductInfoController].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductInfoController extends _i1.Mock
    implements _i6.ProductInfoController {
  MockProductInfoController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartProductModel get productCart => (super.noSuchMethod(
        Invocation.getter(#productCart),
        returnValue: _FakeCartProductModel_0(
          this,
          Invocation.getter(#productCart),
        ),
      ) as _i2.CartProductModel);
  @override
  set productCart(_i2.CartProductModel? value) => super.noSuchMethod(
        Invocation.setter(
          #productCart,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.RestaurantEnum get restaurant => (super.noSuchMethod(
        Invocation.getter(#restaurant),
        returnValue: _i7.RestaurantEnum.none,
      ) as _i7.RestaurantEnum);
  @override
  _i3.Product get product => (super.noSuchMethod(
        Invocation.getter(#product),
        returnValue: _FakeProduct_1(
          this,
          Invocation.getter(#product),
        ),
      ) as _i3.Product);
  @override
  set product(_i3.Product? value) => super.noSuchMethod(
        Invocation.setter(
          #product,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
      ) as _i4.ReactiveContext);
  @override
  void changeProduct(_i3.Product? product) => super.noSuchMethod(
        Invocation.method(
          #changeProduct,
          [product],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void increaseProductCount() => super.noSuchMethod(
        Invocation.method(
          #increaseProductCount,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void decreaseProductCount() => super.noSuchMethod(
        Invocation.method(
          #decreaseProductCount,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProductObservation(String? text) => super.noSuchMethod(
        Invocation.method(
          #setProductObservation,
          [text],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProduct() => super.noSuchMethod(
        Invocation.method(
          #setProduct,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CartController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartController extends _i1.Mock implements _i8.CartController {
  MockCartController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.CartProductModel> get cartList => (super.noSuchMethod(
        Invocation.getter(#cartList),
        returnValue: <_i2.CartProductModel>[],
      ) as List<_i2.CartProductModel>);
  @override
  set cartList(List<_i2.CartProductModel>? value) => super.noSuchMethod(
        Invocation.setter(
          #cartList,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get totalPrice => (super.noSuchMethod(
        Invocation.getter(#totalPrice),
        returnValue: 0.0,
      ) as double);
  @override
  set totalPrice(double? value) => super.noSuchMethod(
        Invocation.setter(
          #totalPrice,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.RestaurantEnum get restaurantCart => (super.noSuchMethod(
        Invocation.getter(#restaurantCart),
        returnValue: _i7.RestaurantEnum.none,
      ) as _i7.RestaurantEnum);
  @override
  set restaurantCart(_i7.RestaurantEnum? value) => super.noSuchMethod(
        Invocation.setter(
          #restaurantCart,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.CartState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCartState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.CartState);
  @override
  set state(_i5.CartState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
      ) as _i4.ReactiveContext);
  @override
  void changeState(_i5.CartState? value) => super.noSuchMethod(
        Invocation.method(
          #changeState,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> createOrder(_i10.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [context],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  bool setRestaurantName(
    _i7.RestaurantEnum? restaurant,
    dynamic product,
    _i10.BuildContext? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRestaurantName,
          [
            restaurant,
            product,
            context,
          ],
        ),
        returnValue: false,
      ) as bool);
  @override
  void calculateTotalPrice() => super.noSuchMethod(
        Invocation.method(
          #calculateTotalPrice,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addProductToCart(_i2.CartProductModel? product) => super.noSuchMethod(
        Invocation.method(
          #addProductToCart,
          [product],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addQuantitytoProduct(int? index) => super.noSuchMethod(
        Invocation.method(
          #addQuantitytoProduct,
          [index],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void subtractQuantitytoProduct(int? index) => super.noSuchMethod(
        Invocation.method(
          #subtractQuantitytoProduct,
          [index],
        ),
        returnValueForMissingStub: null,
      );
}
