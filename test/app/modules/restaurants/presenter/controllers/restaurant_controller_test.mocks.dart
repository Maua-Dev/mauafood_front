// Mocks generated by Mockito 5.4.4 from annotations
// in mauafood_front/test/app/modules/restaurants/presenter/controllers/restaurant_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:auth_package/core/auth_store.dart' as _i6;
import 'package:auth_package/domain/entities/login_user_info.dart' as _i7;
import 'package:logger/logger.dart' as _i2;
import 'package:mauafood_front/app/shared/domain/entities/restaurant.dart'
    as _i5;
import 'package:mauafood_front/app/shared/domain/usecases/get_restaurant.dart'
    as _i4;
import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IGetRestaurant].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGetRestaurant extends _i1.Mock implements _i4.IGetRestaurant {
  MockIGetRestaurant() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.Restaurant> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: <_i5.Restaurant>[],
      ) as List<_i5.Restaurant>);
}

/// A class which mocks [AuthStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStore extends _i1.Mock implements _i6.AuthStore {
  MockAuthStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  set user(_i7.LoggedUserInfo? value) => super.noSuchMethod(
        Invocation.setter(
          #user,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLogged => (super.noSuchMethod(
        Invocation.getter(#isLogged),
        returnValue: false,
      ) as bool);

  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);

  @override
  void setUser(_i7.LoggedUserInfo? value) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> checkLogin() => (super.noSuchMethod(
        Invocation.method(
          #checkLogin,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
