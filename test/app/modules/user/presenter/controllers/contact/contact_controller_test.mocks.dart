// Mocks generated by Mockito 5.4.2 from annotations
// in mauafood_front/test/app/modules/user/presenter/controllers/contact/contact_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mauafood_front/app/modules/user/domain/entities/user.dart'
    as _i8;
import 'package:mauafood_front/app/modules/user/presenter/controllers/user_controller.dart'
    as _i7;
import 'package:mauafood_front/app/shared/domain/usecases/send_email.dart'
    as _i3;
import 'package:mauafood_front/app/shared/domain/usecases/user_send_email.dart'
    as _i6;
import 'package:mauafood_front/app/shared/helpers/errors/errors.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ISendEmail].
///
/// See the documentation for Mockito's code generation for more information.
class MockISendEmail extends _i1.Mock implements _i3.ISendEmail {
  MockISendEmail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(
    String? name,
    String? email,
    String? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            name,
            email,
            message,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [
              name,
              email,
              message,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [IUserSendEmail].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserSendEmail extends _i1.Mock implements _i6.IUserSendEmail {
  MockIUserSendEmail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(String? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [message],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [message],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [UserController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserController extends _i1.Mock implements _i7.UserController {
  MockUserController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set user(_i8.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isLogged => (super.noSuchMethod(
        Invocation.getter(#isLogged),
        returnValue: false,
      ) as bool);
  @override
  _i4.Future<void> loadUser() => (super.noSuchMethod(
        Invocation.method(
          #loadUser,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> isFirstUse() => (super.noSuchMethod(
        Invocation.method(
          #isFirstUse,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
